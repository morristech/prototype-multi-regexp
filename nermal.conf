# Baseline, before any substitutions:
#
# - '%' is special marker for substitutions; to include raw '%', double it
# - Construct '$NAME(....)' specifies extraction; to include raw '$', #double it
#    - It is legal to nest extractions
# - Result of expanded matching definitions needs to be valid regexp, processor


### First, let's define basic patterns using "patterns" (regexps)

# inline whitespace is understood, but for more explicit usage may also define:
pattern %ws \s+
pattern %optws \s*
# 'phrase' means non-space-sequence of characters; 'word' letters; 'num' digits
pattern %word \w+
pattern %phrase \S+
pattern %nr \d+
# more semantic macros, loosely defined
pattern %ts %phrase
pattern %ip %phrase
# it is legal to quote pattern name, usually to avoid mismatch (unlikely to be needed but legal)
pattern %maybeUUID %"phrase"
pattern %"hostname" %phrase
pattern %any .*

# then possible "templates", building blocks that consist of named patterns, literal text and possible embedded
# "anonymous" patterns (enclosed in %{....} and neither parsed (to substituted) nor escaped (like literal text))

template @base <%nr>$eventTimeStamp(%ts) $logAgent(%ip) RealSource: "$logSrcIp(%ip)" Environment: "$environment(%phrase)" UUID: "$uuid(maybeUUID)"\
 RawMsg: <%nr>$rawMsgTS(%word %num %phrase) $logSrcHostname(%hostname) $appname($word)[$appPID(%num)]:

# and then higher-level composition

# sample:
#<86>2015-05-12T20:57:53.302858+00:00 10.1.11.141 RealSource:    "10.1.63.172" Environment: "SFDC-IT" UUID: "NO" RawMsg: <86>May 12 20:57:53 sfm-jbhap-ls100 sshd[12973]: Accepted keyboard-interactive/pam for vgudidevuni.su from 10.3.42.185 port 58216 ssh2

extract sshdAcceptedSessionsLinux {
  template @base ($authStatus(Accepted)) $sshAuthMethod(%phrase) for $user(%hostname) from $srcIP(%ip) port $srcPort(%nr) $sshProtocol(%phrase)
  append "service":"ssh", "logType":"security", "serviceType":"authentication", \
    "vendor":"Redhat", "product":"Linux"
}

extract sshdAcceptedSessionsBigIP { }

extract ASABuiltInboundNoUserID { }
extract ASABuiltInboundWithUserID { }
extract ASABuiltOutboundNoUserID { }
extract ASABuiltOutboundWithUserID { }
extract ASAVpnUrlLogWithUserID { }
extract ASAVpnUrlLogNoUserID { }
extract broProdHttp { }
extract ssgdWebtopStarted { }
extract ssgdEmulatorStarted { }
extract WindowsLogon4624 { }


#### end of sample crap
